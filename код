import re
from collections import defaultdict


# Класс узла односвязного списка
class Node:
    def __init__(self, value=None, next=None):
        self.value = value
        self.next = next


# Односвязный стек
class Stack:
    def __init__(self):
        self.top = None  # Верхний элемент стека (указатель на первый узел)

    def push(self, value):
        new_node = Node(value=value, next=self.top)
        self.top = new_node

    def pop(self):
        if self.is_empty():
            raise IndexError("Стек пуст!")
        popped_value = self.top.value
        self.top = self.top.next
        return popped_value

    def peek(self):
        if self.is_empty():
            raise IndexError("Стек пуст!")
        return self.top.value

    def is_empty(self):
        return self.top is None


# Очередь на основе обычного списка
class Queue:
    def __init__(self):
        self._data = []

    def append(self, item):
        self._data.append(item)

    def popleft(self):
        if not self.is_empty():
            return self._data.pop(0)
        raise IndexError('Очередь пуста!')

    def peek(self):
        if not self.is_empty():
            return self._data[0]
        raise IndexError('Очередь пуста!')

    def is_empty(self):
        return len(self._data) == 0


# Построитель графа
class GraphBuilder:
    @staticmethod
    def normalize(word):
        end = -2 if len(word) > 1 and word[-1] == 'ь' else -1
        return word[0], word[end]

    def __init__(self, words):
        self.graph = defaultdict(list)
        self.in_degree = defaultdict(int)
        self.out_degree = defaultdict(int)
        self.edges = defaultdict(list)
        self.build(words)

    def build(self, words):
        for w in words:
            start, end = self.normalize(w)
            self.graph[start].append(end)
            self.out_degree[start] += 1
            self.in_degree[end] += 1
            self.edges[(start, end)].append(w)


# Поиск Эйлерова пути
class PathFinder:
    def __init__(self, graph_builder):
        self.graph = graph_builder.graph
        self.edges = graph_builder.edges
        self.in_degree = graph_builder.in_degree
        self.out_degree = graph_builder.out_degree

    def find_start_node(self):
        # Нахождение стартовой вершины для обхода Эйлерова пути
        start = None
        vertices = set(self.in_degree.keys()) | set(self.out_degree.keys())

        for vertex in vertices:
            out_degree = self.out_degree.get(vertex, 0)
            in_degree = self.in_degree.get(vertex, 0)

            # Если разница исходящих и входящих степеней равна 1 — это начало пути
            if out_degree - in_degree == 1:
                if start is not None:
                    return None
                start = vertex

            elif abs(out_degree - in_degree) > 1 or (out_degree == 0 and in_degree > 0):
                return None

        if start is None:
            for vertex in vertices:
                if self.out_degree.get(vertex, 0) > 0:
                    return vertex
        return start

    def hierholzer(self, start):
        local_graph = {u: Queue() for u in self.graph}
        for u, v in self.graph.items():
            queue = local_graph[u]
            for neighbor in v:
                queue.append(neighbor)

        stack = Stack()  # Использование стека на основе односвязного списка
        stack.push(start)
        path = []

        while not stack.is_empty():
            current_vertex = stack.peek()
            neighbors = local_graph[current_vertex]

            if not neighbors.is_empty():
                next_vertex = neighbors.popleft()
                stack.push(next_vertex)
            else:
                path.append(stack.pop())

        path.reverse()
        return path

    def build_chain(self, words):
        # Основной метод для формирования цепи слов
        start = self.find_start_node()
        if start is None:
            return None

        path = self.hierholzer(start)
        result = []

        for i in range(len(path) - 1):
            edge = (path[i], path[i + 1])
            if self.edges[edge]:
                result.append(self.edges[edge].pop())
            else:
                return None

        # Проверка цикличности первой и последней букв
        first_letter, _ = GraphBuilder.normalize(result[0])
        _, last_letter = GraphBuilder.normalize(result[-1])
        if last_letter != first_letter:
            return None

        return result


# Валидатор ввода
class Validator:
    @staticmethod
    def validate_input(input_line):
        words = input_line.strip().split()
        if not words:
            print("Ошибка: пустой ввод!")
            return None

        pattern = re.compile(r'^[а-яё]+$')
        for w in words:
            if not pattern.fullmatch(w):
                print(f"Ошибка: слово '{w}' содержит недопустимые символы.")
                return None

        return words


# Контроллер приложения
class AppController:
    def run(self):
        print("\nДобро пожаловать в игру \"Цепочка слов\"!\n")
        print("Правила просты:\nВведите слова через пробел.\nПервые и последние буквы соседних слов должны совпадать.")
        print("\nНачнем играть?\n")

        while True:
            try:
                user_input = input("\nВаши слова (только русские буквы): ").lower()
                words = Validator.validate_input(user_input)

                if words is None:
                    continue

                # Строим граф и ищем путь
                builder = GraphBuilder(words)
                finder = PathFinder(builder)
                chain = finder.build_chain(words)

                if chain:
                    print("\nПоздравляю! Вам удалось составить цепочку слов:")
                    print(" -> ".join(chain))
                else:
                    print("\nК сожалению, по вашим словам цепочку составить не удалось.")

                while True:
                    choice = input("\nХотите попробовать снова? (Да / Нет): ").strip().lower()
                    if choice == 'нет':
                        break
                    elif choice == 'да':
                        break
                    else:
                        print("Пожалуйста, введите 'Да' или 'Нет'")

                if choice == 'нет':
                    break

            except Exception as e:
                print(f"\nПроизошла ошибка: {e}. Попробуем еще раз?")

        print("\nСпасибо за игру! До новых встреч!\n")


if __name__ == "__main__":
    controller = AppController()
    controller.run()
